name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  resolve-versions:
    name: Resolve Grafana images
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      matrix: ${{ steps.resolve-versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Resolve Grafana E2E versions
        id: resolve-versions
        uses: grafana/plugin-actions/e2e-version@main

  build:
    needs: resolve-versions
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        GRAFANA_IMAGE: ${{fromJson(needs.resolve-versions.outputs.matrix)}}
    name: e2e ${{ matrix.GRAFANA_IMAGE.name }}@${{ matrix.GRAFANA_IMAGE.VERSION }}
    runs-on: ubuntu-latest
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Check types
        run: yarn typecheck

      - name: Lint
        run: yarn lint

      - name: Frontend unit tests
        run: yarn test:ci

      - name: Build frontend
        run: yarn build

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
          cache-dependency-path: "**/*.sum"

      - name: Test backend
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage

      - name: Build backend [linux]
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: build:linux
#          args: buildAll # do we want to build all?

      - name: Start Grafana
        run: |
          docker-compose pull
          GRAFANA_VERSION=${{ matrix.GRAFANA_IMAGE.VERSION }} GRAFANA_IMAGE=${{ matrix.GRAFANA_IMAGE.NAME }} docker-compose up -d

      - name: Wait for prometheus to start
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:9090/-/ready'
          responseCode: 200
          timeout: 20000
          interval: 500

      - name: Wait for Grafana to start
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:3000/'
          responseCode: 200
          timeout: 60000
          interval: 500

      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps

      - name: Run Playwright tests
        id: run-tests
        run: yarn e2e

      - name: Upload playwright artifacts
        uses: actions/upload-artifact@v4
        if: ${{ github.repository_owner != 'grafana' && (always() && steps.run-tests.outcome == 'success') || (failure() && steps.run-tests.outcome == 'failure') }}
        with:
          name: playwright-report-${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}
          path: playwright-report/
          retention-days: 30

      - name: Upload playwright videos
        uses: actions/upload-artifact@v4
        if: ${{ github.repository_owner != 'grafana' && (always() && steps.run-tests.outcome == 'success') || (failure() && steps.run-tests.outcome == 'failure') }}
        with:
          name: test-results-${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}
          path: test-results/
          retention-days: 30

#      - name: Publish report to GCS
#        if: ${{ github.repository_owner == 'grafana' && (always() && steps.run-tests.outcome == 'success') || (failure() && steps.run-tests.outcome == 'failure') }}
#        uses: grafana/plugin-actions/publish-report@main
#        with:
#          grafana-version: ${{ matrix.GRAFANA_IMAGE.VERSION }}

      - name: Stop grafana docker
        run: docker-compose down

      - name: Sign plugin
        run: yarn sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{github.run_id}}-${{ steps.metadata.outputs.plugin-id }}
          retention-days: 5
